---
title: logging inside a package
---

```{r}
devtools::load_all("./pkg.log4r")
library(log4r)
```

the default you can see we lose the key value pairs:

```{r}
showcase("example1")
do_work(2)
```


```{r}
logger <- logger(
  appenders = console_appender(logfmt_log_layout())
)
set_logger(logger)
```


```{r}
do_work(2)
```

Now lets say we want those sweet cli checkboxes


```{r}
cli_fmt <- function(level, ...) {
    fields <- list(...)
    if (level == "INFO") {
        cli::cli_alert_success(fields$message)
    } else if (level == "WARN") {
        cli::cli_alert_warning(fields$message)
    } else if (level == "ERROR") {
        cli::cli_alert_danger(fields$message)
    } else {
        cli::cli_alert_info(fields$message)
    }
    return(NULL)
}
```

```{r}
logger <- logger(
  appenders = console_appender(cli_fmt)
)
set_logger(logger)
```


```{r}
do_work(2)
```


```{r}
cli_fmt_with_fields <- function(level, ...) {
    fields <- list(...)
    time_format <- "%Y-%m-%dT%H:%M:%SZ"
    # drop time formatting for example where we wrap the output with a logger anyway
    #encoded <- log4r:::encode_logfmt(c(timestamp =log4r:::fmt_current_time(time_format, TRUE), fields))
    encoded <- log4r:::encode_logfmt(fields)
    if (level == "INFO") {
        cli::cli_alert_success(encoded)
    } else if (level == "WARN") {
        cli::cli_alert_warning(encoded)
    } else if (level == "ERROR" || level == "FATAL") {
        cli::cli_alert_danger(encoded)
    } else {
        cli::cli_alert_info(encoded)
    }
    return(NULL)
}
logger <- logger("DEBUG",
  appenders = console_appender(cli_fmt_with_fields)
)
set_logger(logger)
```

```{r}
do_work(2)
```



```{r}
showcase("example1")
```